# Workflow name
name: ComeOn App Dev CI/CD
# Event Trigger
on:
  push:
    branches: [ "dev" ]
# 현재 Workflow를 구성하는 Job들을 정의
jobs:
  # 하나의 Job에 대한 식별자를 설정. test_and_build는 하나의 Job이 된다.
  test_and_build:
    # 실행환경 설정
    runs-on: ubuntu-latest
    # 현재 Job을 구성하는 Step들을 정의
    steps:
    # `-`으로 Step을 구분한다. name은 Step의 식별자를 정의한다.
    - name: Checkout
      # Action을 사용하여 Step을 구성한다.
      uses: actions/checkout@v3
      # Action에 사용될 변수값 지정
      with:
        # repo settings에서 설정한 secrets 값을 사용한다.
        token: ${{ secrets.ACCESS_TOKEN }}
        submodules: true
    ### runner application java 설정
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    ### gradlew 실행 권한 부여
    - name: Grant execute permisstion for gradlew
      # shell 명령어로 Step의 Task를 지정한다.
      run: chmod +x gradlew
    ### project test
    - name: Test
      run: ./gradlew clean test -Pprofile=test
    ### project build
    - name: Build
      run: ./gradlew bootJar
    ### 도커 buildx 설정
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2.2.1
    ### 도커 이미지 build & push
    - name: Docker Image build and push
      # 다음과 같이 작성하여 한 Task에서 여러 shell 명령을 수행하게 할 수 있다.
      run: |
        docker login --username=${{ secrets.DOCKERHUB_USERNAME }} --password=${{ secrets.DOCKERHUB_PASSWORD }}
        docker buildx build --platform linux/arm64/v8,linux/amd64 --tag ${{ secrets.DOCKERHUB_USERNAME }}/image-name:latest --push .

  # 하나의 Job에 대한 식별자를 설정. deploy는 하나의 Job이 된다.
  deploy:
    # 현재 Job의 의존관계 설정. test_and_build 식별자를 갖는 Job이 성공해야 현재 Job이 수행된다.
    needs: test_and_build
    runs-on: ubuntu-latest
    steps:
      ### ssh로 배포 서버에 접근하여 도커 이미지 pull & run
      - name: Docker image pull and run
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            docker compose down
            docker image rm ${{ secrets.DOCKERHUB_USERNAME }}/image-name
            docker compose up -d --no-recreate
